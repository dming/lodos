package rpc_test

import (
	"fmt"
	"sync"
	"reflect"
	"errors"
	"time"
	"rpc"
)

type me struct {
	name string
	age int
}

func Example() {
	s := rpc.NewChanServer(10)

	var wg sync.WaitGroup
	wg.Add(1)

	// goroutine 1
	// the function should be as bellow :
	// func funcName (inputs) (outputs, error)
	// PS: error in output is require
	go func() {
		s.Register("f0", func() (error) {
			return nil
		})

		s.Register("f1", func() (interface{}, error) {
			time.Sleep(time.Second * 0)
			return 1, nil
		})

		s.Register("fn", func() ([]interface{}, error) {
			r := make([]interface{}, 3)
			r[0] = "hello"
			ll := new(me)
			ll.name = "dming"
			ll.age = 18
			r[1]= ll
			r[2] = 3
			return r, nil
		})
//first int, second int
		s.Register("add", func(args ...interface{}) (interface{}, error) {
			//fmt.Printf("%v + %v = %v\n", args[0].(int), args[1].(int), args[0].(int) + args[1].(int))
			//return first + second

			if (len(args) < 2) {
				return nil, errors.New("need 2 args")
			} else {
				for i := 0; i < 2; i++ {
					if reflect.TypeOf(args[i]).Kind() != reflect.Int {
						return nil, errors.New(" args need to be int")
					}
				}
			}



			return args[0].(int) + args[1].(int), nil
		})

		wg.Done()

		for {
			s.Exec(<-s.ChanCall)
		}
	}()

	wg.Wait()
	wg.Add(1)

	// goroutine 2
	go func() {
		// the args of '10' is the cache for async chanel , c.AsynCall count should not larger than it.
		c := rpc.NewChanClient(s.ChanCall, 10)


		// sync
		_, err := c.Call("f0")
		if err != nil {
			fmt.Println(err)
		}

		r1, err := c.Call("f1")
		if err != nil {
			fmt.Println(err)
		} else {
			fmt.Println(r1[0])
		}

		rn, err := c.Call("fn")
		if err != nil {
			fmt.Println(err)
		} else {
			rn := rn[0].Interface().([]interface{})
			fmt.Println(rn[0], rn[1], rn[2])
		}

		k := make([]interface{}, 2)
		k[0] = 1
		k[1] = 2
		ra, err := c.Call("add", 1, 2)
		if err != nil {
			fmt.Println(err)
		} else {
			//fmt.Println(reflect.ValueOf(ra[0]))
			fmt.Printf("%d\n", ra[0].Interface())
		}

		// asyn
		c.AsynCall("f0", func(err interface{}) {
			if  err != nil {
				fmt.Println(err)
			} else {
				//fmt.Println("just something.")
			}
		})

		c.AsynCall("f1", func(ret interface{}, err interface{}) {

			if  err != nil {
				fmt.Println("error f1")
				fmt.Println(err)
			} else {
				fmt.Println(ret.(int))
			}
		})

		c.AsynCall("fn", func(ret []interface{}, err interface{}) {
			if  err != nil {
				fmt.Println("error fn")
				fmt.Println(err)
			} else {
				fmt.Println(ret[0], ret[1], ret[2])
			}
		})

		ak := make([]interface{}, 2)
		ak[0] = 1
		ak[1] = 2
		c.AsynCall("add", 1, 2,  func(ret interface{}, err interface{}) {
			if  err != nil {
				fmt.Println(err)
			} else {
				fmt.Println(ret)
			}
		})

		c.Cb(<-c.ChanAsynRet)
		c.Cb(<-c.ChanAsynRet)
		c.Cb(<-c.ChanAsynRet)
		c.Cb(<-c.ChanAsynRet)

		// go
		s.Go("f0")

		wg.Done()
	}()

	wg.Wait()

	// Output:
	// 1
	// hello &{dming 18} 3
	// 3
	// 1
	// hello &{dming 18} 3
	// 3

}
